# Copyright (c) 2012-2014 by the GalSim developers team on GitHub
# https://github.com/GalSim-developers
#
# This file is part of GalSim: The modular galaxy image simulation toolkit.
# https://github.com/GalSim-developers/GalSim
#
# GalSim is free software: redistribution and use in source and binary forms,
# with or without modification, are permitted provided that the following
# conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions, and the disclaimer given in the accompanying LICENSE
#    file.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the disclaimer given in the documentation
#    and/or other materials provided with the distribution.
#
# - obj type : InterpolatedImage(image, scale)
# - obj type : RealGalaxy(..., whiten)
# - float_value type : RandomDistribution(function, x_min, x_max)
# - image : draw_method (no_pixel)
# - input.power_spectrum : (e_power_file, delta2, units)
# - image.index_convention : (0 or 'C' or 'python') vs (1 or 'Fortran' or 'FITS')
# - wcs type : Tan(dudx, dudy, dvdx, dvdy, units, origin, ra, dec)
#
# - Power spectrum shears and magnifications for non-gridded positions.
# - Reading a compressed FITS image (using BZip2 compression).
# - Writing a compressed FITS image (using Rice compression).
#

# Define the PSF profile
psf : 
    # We introduce here a new way to describe a profile.  We can use an image from a fits
    # file and interpolate between the pixels with type = InterpolatedImage.
    type : InterpolatedImage
    
    # The only required parameter is the name of the file with the image.  Note: the file is 
    # bzipped, to demonstrate the new capability of reading in a file that has been compressed 
    # in various ways (which GalSim can infer from the filename).
    image : "data/example_sdss_psf_sky0.fits.bz2"

    # If the fits file has a scale given in the header information, we can use that for 
    # the pixel scale.  If it is not given it will assume 1. 
    # Or we can also override that by providing an explicit pixel scale here.
    # This file is a real SDSS PSF, which means pixel scale of 0.396 arcsec.  However, the 
    # typical seeing is 1.2 arcsec and we want to simulate better seeing, so we will just 
    # tell GalSim that the pixel scale is 0.2 arcsec to match the pixel scale we use below.
    scale : 0.2

# Define the galaxy profile
gal :
    type : List
    items :
        # Another option available for the RealGalaxy type is whiten.  If set to true, then
        # we will keep track of the original correlated noise in the image and whiten it before 
        # adding the additional noise (specified below in image.noise).
        #
        # When whitening the image, we need to make sure the original correlated noise is
        # present throughout the whole image, otherwise the whitening will do the wrong thing
        # to the parts of the image that don't include the original image.  The RealGalaxy
        # stores the correct noise profile to use, but we need to tell it how large to pad
        # with this noise.  This is a bit complicated for the code to figure out on its own, 
        # especially with the possibility of compound objects, dilations, shears, etc.  So we 
        # require the user to provide the size with the noise_pad_size parameter.
        #
        # In this case, the postage stamp will be 32 arcsec for the undilated galaxies.
        # We expand the postage stamp as we dilate the galaxies, so that factor doesn't 
        # come into play here.  The shear and magnification are not significant, but the 
        # image can be rotated, which adds an extra factor of sqrt(2). So the net required 
        # padded size is
        #     noise_pad_size = 32 * sqrt(2) * 0.2 arcsec/pixel = 9.1 arcsec
        # We round this up to 10 to be safe.
        - { type : RealGalaxy, id : 106416, whiten : true, noise_pad_size : 10 }
        - { type : RealGalaxy, id : 106731, whiten : true, noise_pad_size : 10 }
        - { type : RealGalaxy, id : 108402, whiten : true, noise_pad_size : 10 }
        - { type : RealGalaxy, id : 116045, whiten : true, noise_pad_size : 10 }
        - { type : RealGalaxy, id : 116448, whiten : true, noise_pad_size : 10 }
    index : { type : Random }
    # Note: we could also have set the main gal type to RealGalaxy and had id be a list with
    # a random index.  However, the above structure lets the code cache the constructed items
    # in the list and reuse them.  For RealGalaxy, which has a relatively large construction 
    # cost, this is a significant savings.

    dilation :
        # We draw the sizes from a power law distribution.
        # You can use any arbitrary function here, along with a min and max value,
        # and values will be drawn within this probability distribution.
        # The function should be given in terms of the variable x, since internally
        # it is parsed with eval('lambda x : ' + function).
        type : RandomDistribution
        function : x**-2.5
        x_min : 1
        x_max : 5

    shear : 
        # We again use PowerSpectrumShear, which is set up below using input : power_spectrum.
        type : PowerSpectrumShear

    magnification :
        # We use PowerSpectrumMagnification for this, which is set up below using input : 
        # power_spectrum.
        type : PowerSpectrumMagnification

    rotation :
        type : Random

    signal_to_noise : 100


# Define some other information about the images 
image :
    type : Scattered

    size : 3600 # 0.2 degrees * 3600 arcsec/deg / 0.2 arcsec/pixel

    nobjects : 288 # corresponds to 2 gal / arcmin^2

    # This time we use stamp_size to set the size of the postage stamps.  In demo9, we left 
    # it out, so GalSim automatically determined a good size for each object. That's usually 
    # fine, but here we want to scale the stamp size by the same dilation we used for the 
    # galaxies.  This makes sure the noise padding used for the RealGalaxy is large enough 
    # that the whitening process whitens the entire postage stamp correctly.
    #
    # To access the value of the dilation for the current galaxy, we use a new type: Current.
    # This lets you access current values of other keys in the config file.  In this case,
    # we want gal.dilation, which accesses the current value of that key for each galaxy.
    #
    # We couple this with Eval to perform a calculation of the stamp size that matches the 
    # calculation in the python script, where we wanted the size to be odd to make it easier
    # to deal with the image offsets:
    stamp_size : 
        type : Eval
        str : '2 * int(math.ceil(base_stamp_size * dilat / 2)) + 1'
        ibase_stamp_size : 32  # pixels
        fdilat : { type : Current, key : gal.dilation }
    
    # The default convention on positions is to follow the FITS standard where the lower left
    # pixel is called (1,1).  However, this can be counter-intuitive to people more used
    # to C or python indexing, where indices start at 0.  So we offer the option of switching
    # the indexing convention.  This is probably only  useful if you are going to do something 
    # non-trivial with the image_pos values.
    # 
    # If index_convention is 0 or 'C' or 'python', then the lower-left pixel is (0,0).
    # If index_convention is 1 or 'Fortran' or 'FITS', then the lower-left pixel is (1,1).
    # The default is 1.
    index_convention : 0

    # In demo9, we said that you can specify either image_pos or world_pos to place
    # each postage stamp on the full image.  If you don't specify either one, then the 
    # default is random x and y within the full image.
    #
    # image_pos : 
    #     type : XY 
    #     x : { type : Random , min : 0 , max : xsize-1 }
    #     y : { type : Random , min : 0 , max : ysize-1 }
    #
    # Note: if image_convention were 1 as is the default, then these would instead be 
    #     min : 1 , max : {x,y}size 


    # Add Gaussian noise.  When using the whitening feature, the whitening process will end
    # up with white Gaussian noise.  So adding more Gaussian noise can be done coherently.
    # Adding any other kind of noise (Poisson for instance) will actually result in some 
    # Gaussian noise as well, with the total variance preserved.
    noise :
        type : Gaussian
        variance : 1.0e4   # Total variance including whatever the whitening process needs.

    # For the WCS, we use one that has the world coordinates on the celestial sphere, using
    # a TAN projection.  This WCS uses an affine transform first to get to a (u,v) coordinate
    # system.  Then this plane is projected onto the sky using a given point as the tangent
    # point.  For the affine transform, we just use a slight rotation and center it at the
    # center of the image.
    wcs :
        type : Tan
        # theta and pixel_scale are defined in eval_variables, so we can use them here.
        dudx : { type : Eval, str : 'math.cos(theta.rad()) * pixel_scale' }
        dudy : { type : Eval, str : '-math.sin(theta.rad()) * pixel_scale' }
        dvdx : { type : Eval, str : 'math.sin(theta.rad()) * pixel_scale' }
        dvdy : { type : Eval, str : 'math.cos(theta.rad()) * pixel_scale' }

        # This is the default, but we put it in anyway to make it explicit.
        # It sets the angular units of the (u,v) intermediate coordinate system.
        units : arcsec

        # Set (u,v) = (0,0) to be the center of the image.
        origin : center

        # These are the celestial coordinates of (u,v) = (0,0).
        ra : 19.3 hours
        dec : -33.1 degrees

    # Normally, the draw routine accounts for a convolution by the pixel.  In this case we 
    # we don't want it to do that, since the psf here is what is sometimes called an 
    # "effective PSF".  It is already the convolution of the real PSF with a square pixel.
    # We can indicate that we don't want the draw routine to convolve by a pixel by using 
    # draw_method = no_pixel.
    draw_method : no_pixel

    random_seed : 24783923

# Some variable we use in the Evals above for the wcs field.
eval_variables :
    # An unusual prefix.  Reminder, the a stands for Angle.
    atheta : 0.17 degrees
    # A more typical one: f = float.
    fpixel_scale : 0.2    # The units for this, arcsec, are given by the wcs.units item.

# Define the input files
input :
    # In this case, we need to define where the real galaxy input catalog is.
    real_catalog :
        dir : "data"
        file_name : real_galaxy_catalog_example.fits

    # We also initialize the power spectrum here.
    power_spectrum :
        # In this case, we read the e_power_function from a file.  This is done simply by 
        # providing the file name for the e_power_function parameter.  The input file is
        # expected to have two columns of numbers:  k and P(k).  GalSim is not capable of computing
        # shear power spectra as a function of cosmology and redshift; users are expected to provide
        # their own, or use the examples already in the repository.
        e_power_function : "data/cosmo-fid.zmed1.00.out"

        # The default units of k are arcsec^-1 to match all the other units.  But again,
        # sometimes it is more convenient to define them in different units.  You may
        # specify units = arcsec, arcmin, degrees, or radians.  The units must be consistent for the
        # input k and P(k), i.e., if k is in inverse radians then P must be in radians^2.
        units : radians

        # Since we are not providing galaxy positions on a grid (e.g. in demo10, where we
        # used a TiledImage), we need to define what grid spacing we want to use for
        # the power spectrum realization.  GalSim will then interpolate between these 
        # locations to the actual position of each galaxy.
        grid_spacing : 90 # arcsec

# Define the names and format of the output files
output :

    dir : output_yaml

    # Note that the filename ends in .fz.  This is the standard ending for a Rice-compressed
    # fits file.  When GalSim sees that, it automatically applies Rice compression to the
    # output image.
    file_name : tabulated_power_spectrum.fits.fz

