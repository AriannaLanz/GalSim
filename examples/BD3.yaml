
# YAML configuration file for use with the executable galsim_yaml
# Type:
#   galsim_yaml BD3.yaml
#
# This configuration file is designed to be equivalent to the example script called
# Script3 in BasicDemo.py.
# This is getting reasonably close to including all the principle features of a 
# ground-based telescope:
# - Use a sheared, Sersic profile for the galaxy 
#   (n = 3.5, half_light_radius=3.7).
# - Let the PSF have both atmospheric and optical components.
#     - The atmospheric component is the sum of two non-circular Gaussians.
#     - The optical component has some defocus, coma, and astigmatism.
# - Add both Poisson noise to the image and Gaussian read noise.
# - Let the pixels be slightly distorted relative to the sky.
#

gal :
    type : Sersic
    n : 3.5
    half_light_radius : 3.7  # arcsec
    flux : 1.e6  # ADU

    shear : 
        # QBeta means to use the axis ratio (q = b/a) and a position angle.
        type : QBeta
        q : 0.73
        # For angles, you must let GalSim know which units you intend.
        # So the number must be followed by either degrees or radians
        # (or arcminutes or arcseconds if you prefer).
        # These may be abbreviated to deg and rad (and  arcmin, arcsec).
        beta : 23 degrees
 

psf : 
    # This PSF will be the convolution of an atmospheric component and an optical component.
    type : Convolution

    # Any number of items may be convolved together, so we specify them in a list.
    # Use one bullet for each item.
    items :
        -
            # For the atmospheric component, we'll use a double Gaussian.
            # Sum works just like Convolution, where the items to be added are 
            # provided in a list.
            type : Sum
            items :
                -
                    type : Gaussian
                    sigma : 2.1  # arcsec
                    ellip :
                        type : EBeta
                        e : 0.13
                        beta : 0.81 radians
                    flux : 0.2  # Fractional flux in this component
                -
                    type : Gaussian
                    sigma : 0.9  # arcsec
                    ellip :
                        type : EBeta
                        e : 0.04
                        beta : -0.17 radians
                    flux : 0.8  # Fractional flux in this component

        -
            # For the optical component, GalSim provides an OpticalPSF class that 
            # implements the PSF pattern from various telescope aberrations.
            type : OpticalPSF
            # TODO: The demo script does a calculation for lam_over_D.
            # Should we enable this in the config file?  How?
            #lam : 800  # nm
            #tel_diam : 4.  # m
            #lam_over_D : "lam * 1.e-9 / tel_diam * 206265"   # arcsec
            lam_over_D : 0.041253  # arcsec

            # The rest of these values are given in units of lambda
            defocus : 0.53
            astig1 : -0.29
            astig2 : 0.12
            coma1 : 0.64
            coma2 : -0.33

            # The linear scale of the secondary mirror obstruction
            obscuration : 0.3

image :
    pixel_scale : 0.23   # arcsec / pixel
    size : 64  # pixels in each direction
    # (You can also specify xsize and ysize separately for non-square images.)
   
    # You may provide a WCS to be applied to the image.
    # In this case, we simply have a constant telescope distortion over the image.
    wcs : 
        # TODO: This is nowhere near general enough.
        # Plus our implementation of how we handle this has not been tested for accuracy.
        shear : 
            type : G1G2
            g1 : -0.02
            g2 : 0.01

    noise : 
        # The CCDNoise type is more general than a simple Poisson, since it allows
        # you to specify a gain and a read_noise.
        # Poisson is equivalent to CCDNoise with gain = 1, read_noise = 0
        # Gaussian is equivalent to CCDNoise with gain = 0, read_noise = sigma
        type : CCDNoise
        sky_level : 1.e3  # e- / pixel
        gain : 1.7  # ADU / e-
        read_noise : 0.3  # ADU / pixel


# If you want the random values used to be deterministic, you can provide an initial seed.
# If this isn't set, then it will use the current time to create an initial seed.
random_seed : 1314662


output :
    dir : output_yaml
    file_name : demo3.fits
    
    # Sometimes it is useful to have the PSF image also written to a file.
    # The PSF image will always have the same pixel centering as the galaxy, and if there 
    # was any random component to the PSF generation, then this will be the exact same PSF
    # that was used for the galaxy.  Plus, there is no noise in the PSF image.
    psf :
        # You may either specify a new file_name as we do here, or you can specify
        # 'hdu' to put the PSF image in the same fits file, but in another HDU.
        # TODO: The HDU feature is not implemented yet.
        file_name : demo3_epsf.fits
    
