#
# Demo #10
#
# The tenth YAML configuration file in our tutorial about using Galsim config files
# (This file is designed to be view in a window 100 characters wide.)
#
# This script uses both a variable PSF and variable shear, taken from a power spectrum,
# along the lines of a Great10 challenge image.  The galaxies are placed on a grid
# (10 x 10 in this case, rather than 100 x 100 in the interest of time.)  Each postage stamp
# is 48 x 48 pixels.  Instead of putting the psf images on a separate image, we package them
# as the second hdu in the file.  For the galaxies, we use a random selection from 5 specific
# RealGalaxy's, selected to be 5 particularly irregular ones, each with a random orientation.
#
# New features introduced in this demo:
#
# - RealGalaxy : id
# - image.psf : real_space
#
# - Eval using pos variable, user-defined variables and math functions
#


# Define the PSF profile
psf : 
    type : Gaussian
    fwhm : 
        # We saw the Eval type before (in demo3.yaml) as a way to do simple arithmetic.
        # It becomes much more powerful when you include variables in your equation.
        # One variable that is usable is `pos`, which is the position of the current 
        # object relative to the center of the image in arcsec.  This lets you define
        # any arbitrary function for a particular variable in terms of (x,y).
        type : Eval
        str : '0.9 + 0.4 * (pos.x**2 + pos.y**2) / 100**2'  # 0.9 + 0.4 * (r/100 arcsec)^2

    ellip:
        type : EBeta
        e : 
            type : Eval
            # We also allow any number of user-defined variables.
            # The first letter of the variable name indicates what type it is expected to be:
            #     f = float
            #     i = int
            #     s = string
            #     a = Angle
            #     p = Position
            #     g = Shear
            fr : { type : Eval , str : '(pos.x**2 + pos.y**2)**0.5' } # r
            # Now we can use this variable (without the first letter) in our string:
            str : '0.3 * (r/100)**1.5'
        beta:
            type : Eval
            # And you can also use anything in the Python math module:
            str : '(math.atan2(pos.y,pos.x) + math.pi/2.) * galsim.radians'


# Define the galaxy profile
gal :
    type : List
    items : 
        # Note: we could have made the type RealGalaxy and then have the id be a list
        #       with a random index.  However, doing it this way means that the Fourier
        #       transforms of the real galaxy images don't need to be recalculated each time,
        #       so it's a bit more effficient.
        - { type : RealGalaxy , id : 106416 }
        - { type : RealGalaxy , id : 106731 }
        - { type : RealGalaxy , id : 108402 }
        - { type : RealGalaxy , id : 116045 }
        - { type : RealGalaxy , id : 116448 }
    index : { type : Random }

    dilation : 3  # Make the galaxies a factor of 3 larger than their original observed size.
    rotation : { type : Random }

    shift : 
        type : XY
        # Half a pixel in any direction
        x : { type : Random , min : -0.22 , max : 0.22 }
        y : { type : Random , min : -0.22 , max : 0.22 }

    signal_to_noise : 100


# Define some other information about the images 
image :

    type : Tiled
    nx_tiles : 10
    ny_tiles : 10

    stamp_xsize : 48  # pixels
    stamp_ysize : 48  # pixels

    pixel_scale : 0.44  # arcsec / pixel

    noise :
        sky_level : 1.e6  # ADU / arcsec^2

    random_seed : 3339201


# Define the input files
input :
    # In this case, we need to define where the real galaxy input catalog is.
    real_catalog :
        image_dir : data
        file_name : real_galaxy_catalog_example.fits
        preload : False   # Not so important this time, since only using 5 items in the catalog.


# Define the names and format of the output files
output :

    dir : output_yaml
    file_name : power_spectrum.fits

    # Put the psf image in hdu=1 (the first extension after tha primary hdu)
    psf : 
        hdu : 1
        # We use real space convolution to avoid some of the 
        # artifacts that can show up with Fourier convolution.
        # The level of the artifacts is quite low, but when drawing with
        # no noise, they are apparent with ds9's zscale viewing.
        real_space : True
