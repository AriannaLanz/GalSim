# Draw DES PSFs at the locations of observed galaxies.
#
# This demo probably isn't so useful as an actual program, but it does showcase how to
# use the DES module that comes with GalSim, which can be modified to do what you actually
# need.
#
# It works on a full DES exposure with 62 chip images and the files that are output by the
# DESDM and WL pipelines.  We don't include these files in the repo, since they total about
# 700 MB.  You can download a tarball with the files used by this script at:
#
#     http://www.sas.upenn.edu/~mjarvis/des_data.html
#
# The DESDM pipeline produces a catalog of detected objects for each image, and also an
# interpolated # PSF using Emmanuel Bertin's PSFEx code, which are stored in *_psfcat.psf files.
# The WL pipeline # produces a different estimate of the PSF using Mike Jarvis's shapelet code,
# which are stored in # *_fitpsf.fits files.
#
# This script reads the appropriate files for each chip and builds two images, one for each kind
# of PSF estimate, and draws an image of the PSF at the location of each galaxy.  Normally, you
# would probably want to draw these with no noise on individual postage stamps or something like
# that.


# Define the PSF profile to use the DES shapelet files
psf : 
    type : DES_Shapelet

    skip : { type : InputCatalog, col : 'FLAGS' }
    flux : { type : InputCatalog, col : 'FLUX_AUTO' }


# Setup input files
input :
    des_shapelet :
        #dir : '/data3/DECAM/wl/DECam_00154912'
        #dir : '/Users/Mike/Astro/des/SV/DECam_00154912_wl'
        dir : 'des_data'
        file_name :
            type : NumberedFile
            root : &root DECam_00154912_
            digits : 2
            ext : '_fitpsf.fits'
            num : { type : Sequence, first : 1 }
        
    catalog :
        #dir : '/data3/DECAM/SV/DECam_154912'
        #dir : '/Users/Mike/Astro/des/SV/DECam_00154912_wl'
        dir : 'des_data'
        file_name : 
            type : NumberedFile
            root : *root
            digits : 2
            ext : '_cat.fits'
            num : { type : Sequence, first : 1 }
        hdu : 2

    fits_header :
        #dir : '/data3/DECAM/SV/DECam_154912'
        #dir : '/Users/Mike/Astro/des/SV/DECam_00154912_wl'
        dir : 'des_data'
        file_name : 
            type : NumberedFile
            root : *root
            digits : 2
            ext : '.fits.fz'
            num : { type : Sequence, first : 1 }



# Define some other information about the images 
image :
    type : Scattered

    xsize : { type : FitsHeader , key : 'NAXIS1' }
    ysize : { type : FitsHeader , key : 'NAXIS2' }
    pixel_scale : { type : FitsHeader , key : 'PIXSCAL1' }

    # If you don't have the images, you can use these values instead
    #xsize : 2048
    #ysize : 4096
    #pixel_scale : 0.27
    
    noise :
        type : CCD
        #sky_level_pixel : { type : FitsHeader , key : 'SKYBRITE' }
        sky_level : { type : FitsHeader , key : 'SKYBRITE' }
        gain : 
            # This is an approximation, since GAINA, GAINB are missing in SV files.
            type : Eval
            str : 'sky / sig**2'
            fsky : { type : FitsHeader , key : 'SKYBRITE' }
            fsig : { type : FitsHeader , key : 'SKYSIGMA' }

        # If you don't have the images, you can use these values instead
        #sky_level_pixel : 900
        #gain : 4

    center : 
        type : XY 
        x : { type : InputCatalog , col : 'X_IMAGE' }
        y : { type : InputCatalog , col : 'Y_IMAGE' }

    random_seed : 1339201

    nproc : -1


# Define the names and format of the output files
output :
    #nfiles : 62
    nfiles : 1

    file_name :
        type : NumberedFile
        root : *root
        digits : 2
        ext : '_fitpsf_image.fits'
        num : { type : Sequence, first : 1 }

    dir : 'output_yaml'

    #nproc : -1

