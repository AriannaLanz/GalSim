
# YAML configuration file for use with the executable galsim_yaml
# Type:
#   galsim_yaml MOD1.yaml
#
# This configuration file is designed to be equivalent to the example script called
# Script1 in MultiObjectDemo.py
#
#    Make a fits image cube using parameters from an input catalog
#      - The number of images in the cube matches the number of rows in the catalog.
#      - Each image size is computed automatically by GalSim based on the Nyquist size.
#      - Only galaxies.  No stars.
#      - PSF is Moffat
#      - Each galaxy is bulge plus disk: deVaucouleurs + Exponential.
#      - Parameters taken from the input catalog:
#        - PSF beta
#        - PSF fwhm
#        - PSF e1
#        - PSF e2
#        - PSF trunc
#        - Bulge half-light-radius
#        - Bulge e1
#        - Bulge e2
#        - Bulge flux
#        - Disc half-light-radius
#        - Disc e1
#        - Disc e2
#        - Disc flux
#        - Galaxy dx (two components have same center)
#        - Galaxy dy
#      - Applied shear is the same for each file
#      - Noise is poisson using a nominal sky value of 1.e6

# You can define variables to be used later using the & symbol here.
# Later they will be used with the * symbol.
# This can be useful since you can put things you want to change often near the top of the 
# file so you don't have to scroll down to fine the right place to edit something each time 
# you want to change it.
some_variables :
    - &sky_level  1.e6                # ADU / arcsec^2
    - &pixel_scale  1.0               # arcsec / pixel  (size units in input catalog are pixels)
    - &gal_flux  1.e6                 # arbitrary choise, makes nice (not too) noisy images
    - &gal_g1  -0.009                 #
    - &gal_g2  0.011                  #
    - &image_size  64                 # pixels

# Define what kind of psf to use
psf : 
    # Each type of profile is specified by a type.  e.g. Moffat:
    type : Moffat

    # The various parameters are typically specified as well
    beta : 3.5

    fwhm : 
        # These parameters do not need to be constant.  There are a number of ways to
        # specify variables that might change from object to object.
        # In this case, the parameter specification also has a "type".
        # For now we only have InputCatalog, which means read the value from a catalog:
        type : InputCatalog

        # InputCatalog requires the extra value of which column to use in the catalog:
        col : 6

    # You can also specify both of these on the same line using {}
    trunc : { type : InputCatalog , col : 9 }

    # The nesting goes as deep as it needs to
    ellip :
        type : E1E2 
        e1 : 
            type : InputCatalog 
            col : 7
        e2 : 
            type : InputCatalog 
            col : 8

    # If you don't specify a parameter, and there is a reasonable default, then it 
    # will be used instead.  If there is no reasonable default, you will get an error.
    #flux : 1  # Unnecessary

# A profile can be the sum of several components, each with its own type and parameters:
gal :
    type : Sum
    items :
        - 
            type : Exponential
            half_light_radius : { type : InputCatalog , col : 10 }
            ellip : 
                type : E1E2 
                e1 : { type : InputCatalog , col : 11 }  
                e2 : { type : InputCatalog , col : 12 }
            flux : 0.6
        -
            type : DeVaucouleurs
            half_light_radius : { type : InputCatalog , col : 13 }
            ellip : 
                type : E1E2 
                e1 : { type : InputCatalog , col : 14 }  
                e2 : { type : InputCatalog , col : 15 }
            flux : 0.4

    # When a composite object (like a Sum) has a flux specified, the "flux" values of the
    # components are taken to be relative fluxes, and the full object's value sets the
    # overall normalization.  If this is omitted, the overall flux is taken to be the
    # sum of the component fluxes.
    # Note: If you want to use a variable defined above, you use a *
    flux : *gal_flux

    # An object may have an ellip and a shear, each of which can be specified in terms
    # of either E1E2 (distortion) or G1G2 (reduced shear).
    # The only difference between the two is if there is also a rotation specified.
    # The order of the various modifications are:
    # - ellip
    # - rotation
    # - shear
    # - shift
    shear : 
        type : G1G2 
        g1 : *gal_g1
        g2 : *gal_g2

    shift : 
        type : DXDY 
        dx : { type : InputCatalog , col : 16 } 
        dy : { type : InputCatalog , col : 17 }

# Define some other information about the images 
image :
    pixel_scale : *pixel_scale
    xsize : *image_size
    ysize : *image_size

    # Define what kind of noise to use
    noise : 
        type : Poisson
        sky_level : *sky_level

# Define the initial random number seed
random_seed : 8241573

# Define the input files -- in this case the catalog file to use.
input :
    # In this case, we just have a catalog to read in.
    catalog :
        dir : input
        file_name : galsim_default_input.asc

# Define the output formats
output :
    # Each item should declare what kind of output we want to make and what the file is
    - 
        type : multi_fits
        dir : output_yaml
        file_name : multi.fits
    - 
        type : data_cube
        dir : output_yaml
        file_name : cube.fits
    
