# -*- python -*-

import logging

# --- PSF type ---
#
# Specify the PSF type(s) for the simulated galaxy images; placing a None object as the first entry
# tells GalSim to expect this type information to come from the input catalogue.
#
# The currently available PSF_types are:
#
# "Gaussian"         A Gaussian light distribution.
# "DoubleGaussian"   A sum of two Gaussians found to provide a reasonable empirical fit to ground-
#                    based PSFs.
# "Moffat"           A Moffat (1969) parametric PSF model.
# "Airy"             An Airy function describing ideal diffraction limited optics.
# "OpticalPSF"       A PSF describing telescope optics with coma, astigmatism, defocus and spherical#                    aberration.
# "Pixel"            A square boxcar convolution that describes pixelation / pixel flux integration.
#
# Each of these PSF types has it's own set of input parameters, which must be set for each output
# object via input catalogue values, or given a specified distribution via config file.  See the
# GalSim object docstrings / GalSim documentation for details.
#
# More than one PSF can be specified via adding multiple entries to the list below; the resulting
# PSF in the output image will be the *convolution* of all entries in the list.
#
config.PSF.type = ["Moffat", "Pixel"]
#
# Distributions for PSF parameters (including constant values) may be set below.  These will be 
# overwritten by any values for these parameters found in the input catalogues.
#
# e.g.:
#
# config.PSF.Moffat.beta.distribution = "Constant"
# config.PSF.Moffat.beta.value = 3.
#
# Any parameters not set either in configuration files or input catalogues will adopt their
# keyword default values.
config.PSF.Moffat.flux.distribution = "Constant"
config.PSF.Moffat.flux.value = 1.
config.PSF.Pixel.xw.distribution = "Constant"
config.PSF.Pixel.xw.value = 1.
config.PSF.Pixel.yw.distribution = "Constant"
config.PSF.Pixel.yw.value = 1.


# --- galaxy type ---
#
# Specify the galaxy type(s) for the simulated galaxy images; placing a None object as the first
# entry tells GalSim to expect this type information to come from the input catalogue.
#
# The currently available galaxy types are:
#
# "Gaussian"        A Gaussian light distribution.
# "Sersic"          A Sersic profile.
# "Exponential"     Special case of a Sersic profile with index n = 1.
# "DeVaucouleurs"   Special case of a Sersic profile with index n = 4.
#
# Each of these galaxy types has it's own set of input parameters, which must be set for each output
# object via input catalogue values, or given a specified distribution via config file.  See the
# GalSim object docstrings / GalSim documentation for details.
#
# More than one galaxy can be specified via adding multiple entries to the list below; the resulting
# galaxy in the output image will be the *sum* of all entries in the list.
#
config.galaxy.type = ["DeVaucouleurs", "Exponential"]
#
# Distributions for galaxy parameters (including constant values) may be set below.  These will be 
# overwritten by any values for these parameters found in the input catalogues.
#
# e.g.:
#
# config.galaxy.Exponential.re.distribution = "GammaDeviate"
# config.galaxy.Exponential.re.alpha = 3.5
# config.galaxy.Exponential.re.beta = 1.3
#
# Any parameters not set either in configuration files or input catalogues will adopt their
# keyword default values.


# --- noise distribution ---
#
# Specify what type of noise to add to images (parameter values for the noise can either be set
# via config file such as this or via input catalogue values).
#
# The currently available noise models include:
#
# "GaussianDeviate"  Random noise with a Gaussian distribution of specified mean and sigma.
# "PoissonDeviate"   Random noise with a Poisson distribution of specified mean.
# "CCDNoise"         A simple model of Poisson + Gaussian random noise for a detector system with
#                    specified gain and read_noise.
#
# However, any of the random distributions implemented by GalSim may be applied, if desired.
config.noise.distribution = ["CCDNoise"] 
config.noise.gain = 1.
config.noise.read_noise = 1.



# Logging level at which to echo the commands we run
config.logging_level = logging.INFO
# Setup the basic logger.
logging.basicConfig(level=config.logging_level)

