# vim: set filetype=python :

import os
import glob

Import('env')
ReadFileList=env['__readfunc']

env1 = env.Clone()

# TODO: This won't work on Windows machines...
env1['OBJPREFIX'] = '.obj/'

env1.Prepend(CPPPATH=[os.path.join('#include','galsim')])

lib_dir = 'lib'
header_dir = 'include'
lib_install_dir = os.path.join(env1['INSTALL_PREFIX'], lib_dir)
header_install_dir = os.path.join(env1['INSTALL_PREFIX'], header_dir)

subdirs = ['SBProfile']

lib_files = []
for d in subdirs:
    # This file is typicall created by:
    # ls *.cpp > files.txt
    # in each subdirectory.  But after that, it allows you to remove a file from
    # being included in the library by just deleting it from files.txt, rather
    # than having to delete the .cpp file.
    lib_files1 = ReadFileList(os.path.join(d,'files.txt'))
    for f in lib_files1:
        lib_files += [os.path.join(d,f)]

if env1['MEM_TEST']:
    print 'Using mmgr.cpp'
    lib_files += ['mmgr.cpp']

# Library file containing generic code
obj_lib = env1.SharedObject(lib_files)

lib = env1.SharedLibrary(os.path.join('#lib','galsim'), obj_lib)

lib_targets = [lib]
dummy_targets = []

# The RPATH stuff that normally helps an executable figure out where its shared libraries
# live doesn't work on Macs.  Instead, they keep track of the location of the library
# as part of the library itself.  And then when linking, that information is copied 
# to the executable, so it knows where to look.
# Great.  Except that scons makes the library as "lib/libgalsim.dylib".
# i.e. A path relative to the root directory of GalSim, not an absolute path.
# So wee need to make sure the library has the full path name so the executable can find it.
if env['PLATFORM'] == 'darwin':
    rename_lib = Builder(action = 'install_name_tool -id $SOURCE.abspath $SOURCE')
    env1.Append(BUILDERS = { 'RenameLib' : rename_lib })
    lib2 = []
    for l in lib_targets:
        if 'install' in COMMAND_LINE_TARGETS:
	    lib_name = os.path.join(lib_install_dir,os.path.basename(str(l[0])))
	else:
	    lib_name = str(l[0].abspath)
        lib2 += env1.RenameLib(str(l[0]) + '_dummy' , lib_name)
    dummy_targets += [lib2]

Default(lib_targets, dummy_targets)

if 'install' in COMMAND_LINE_TARGETS:

    installed_lib = env1.Install(dir=lib_install_dir, source=lib_targets)
    env1.Alias(target='install', source=installed_lib)
    # Need this too to make sure the installed libraries get the right absolute path
    env1.Alias(target='install', source=dummy_targets)

    hfiles1 = os.listdir(GetBuildPath('#include'))
    hfiles = []
    for f in hfiles1:
        hfiles += [os.path.join('#include',f)]
    installed_h = env1.Install(dir=header_install_dir, source=hfiles)
    env1.Alias(target='install', source=installed_h)


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    # MJ: The scons delete function doesn't actually delete directories a la rm -rf
    # I think this is a feature they will add someday, so maybe not worth worrying about it.
    # but if we really want the galsim directory to be deleted on an uninstall, we
    # should change this.  Proabaly roll our own Delete function.
    deltarget = Delete("$TARGET")

    hfiles = os.listdir(GetBuildPath('#include'))
    for f in hfiles:
        env1.Alias('uninstall', env1.Command(os.path.join(header_install_dir,f), None, deltarget))

    libfiles = [os.path.join(lib_install_dir, os.path.basename(str(f[0]))) for f in lib_targets]

    for f in libfiles:
        env1.Alias('uninstall', env1.Command(f, None, deltarget))


