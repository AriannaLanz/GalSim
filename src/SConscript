# vim: set filetype=python :

import os
import glob

Import('env')
ReadFileList=env['__readfunc']

env1 = env.Clone()

env1.Prepend(CPPPATH=['#include/galsim'])

lib_dir = 'lib'
header_dir = 'include'
lib_install_dir = os.path.join(env1['INSTALL_PREFIX'], lib_dir)
header_install_dir = os.path.join(env1['INSTALL_PREFIX'], header_dir)

subdirs = ['SBProfile']

lib_files = []
for d in subdirs:
    # This file is typicall created by:
    # ls *.cpp > files.txt
    # in each subdirectory.  But after that, it allows you to remove a file from
    # being included in the library by just deleting it from files.txt, rather
    # than having to delete the .cpp file.
    lib_files1 = ReadFileList(os.path.join(d,'files.txt'))
    for f in lib_files1:
        lib_files += [os.path.join(d,f)]

if env1['MEM_TEST']:
    print 'Using mmgr.cpp'
    lib_files += ['mmgr.cpp']

# Library file containing generic code
obj_lib = env1.SharedObject(lib_files)
lib = env1.SharedLibrary('#lib/galsim', obj_lib)
lib_targets = [lib]

if 'install' in COMMAND_LINE_TARGETS:

    installed_lib = env1.Install(dir=lib_install_dir, source=lib_targets)
    env1.Alias(target='install', source=installed_lib)

    hfiles1 = os.listdir(GetBuildPath('#'+header_dir))
    hfiles = []
    for f in hfiles1:
        hfiles += [os.path.join('#'+header_dir,f)]
    installed_h = env1.Install(dir=header_install_dir, source=hfiles)
    env1.Alias(target='install', source=installed_h)


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    # MJ: The scons delete function doesn't actually delete directories a la rm -rf
    # I think this is a feature they will add someday, so maybe not worth worrying about it.
    # but if we really want the galsim directory to be deleted on an uninstall, we
    # should change this.  Proabaly roll our own Delete function.
    deltarget = Delete("$TARGET")

    # Delete files from include
    # MJ: Not sure if this is right.
    # Looks like it will delete all files from INSTALL_PREFIX/include,
    # which isn't what we want.  (Other things might also me installed there.)
    # Need to make sure we only delete our own files from there.
    hfiles = os.listdir(GetBuildPath('#'+header_dir))
    for f in hfiles:
        env1.Alias('uninstall', env1.Command(os.path.join(header_install_dir,f), None, deltarget))

    libfiles = [os.path.join(lib_install_dir, os.path.basename(str(f[0]))) for f in lib_targets]

    for f in libfiles:
        env1.Alias('uninstall', env1.Command(f, None, deltarget))


