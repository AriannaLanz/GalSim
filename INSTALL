--- GalSim Installation Instructions ---

Here are some notes on the installation of the GalSim toolkit, which uses SCons as its primary
build system.  Currently, these notes are aimed at GalSim developers: they may need to be
tightened up for public consumption!

For info regarding SCons usage (once installed, see below) you can type:

scons --help

at prompt, or see http://www.scons.org/documentation.php

Table of Contents:
1. Libraries/software required before building
2. Installing the galsim Python package
3. Installing example executables
4. Platform-specific notes


1. Libraries/software required before building

i) SCons (http://www.scons.org)

This build system manager needs to be installed (#TODO: which minimum version?), as it is used
by the GalSim installation process.  Check if it is installed, and if so which version, by
typing:

scons --version

at prompt. See Section 4 of this document (platform-specific notes) for some easy to install 
sources of the SCons software.


ii) Python (with Numpy and Pyfits modules installed)

The heart of this code is the Python package galsim and its associated modules.  So you need 
Python (#TODO: Make a decision about versions).  

The galsim package will also assume that the Numpy (http://numpy.scipy.org) module and the 
astronomical FITS file format input/output module Pyfits 
(http://www.stsci.edu/institute/software_hardware/pyfits) are installed onto your Python system
so that they can both be imported by

import numpy
import pyfits

You can test this by loading up the Python interpreter for the version of python you'll be
using with the GalSim toolkit, and typing the two import commands above.  If you get no
warning messge, things are OK.

Some users will find they have a few versions of Python around their operating system.  It will
be important to make sure that the version of Python for which Numpy and Pyfits are installed
is also the one being used for GalSim, and that this is the one *you* want to use GalSim from!
Knowing which installed version of Python will be used is also important for the installation
of the Boost libraries (see v).  See Section 4 of this document for some suggestions about
getting Python, numpy, pyfits and Boost all working well together on your system.


iii) FFTW (http://www.fftw.org)

These Fast Fourier Transform libraries must be installed; see Section 4 for some suggestions
about installing this on your platform.


iv) CFITSIO

#TODO: Remove this. This is, I guess, only temporary once we handle all FITS i/o in python.
Install CFITSIO.


v) Boost C++ (http://www.boost.org)

GalSim makes use of some of the Boost C++ libraries, and Boost must be installed.  It is
particularly important that your installed Boost library links to the version of Python
you will be running the galsim package from, and on which you have installed Numpy and Pyfits
(see ii, above).  Once you have installed Boost, you can check that this is the same by typing

ldd <YOUR_BOOST_LIB_LOCATION>/libboost_python<POSSIBLE_SUFFFIX>.dylib  (on Linux)

otool -L <YOUR_BOOST_LIB_LOCATION>/libboost_python<POSSIBLE_SUFFFIX>.dylib  (on OSX 10.7 #TODO: 
Check other versions)

If the Python executable listed is the one you will be using, all is well.  If not, Boost can
be forced to use a different version by specifying the following options to the ./bootstrap.sh
installation script (defaults in [] brackets):

  --with-python=PYTHON      specify the Python executable [python]
  --with-python-root=DIR    specify the root of the Python installation
                            [automatically detected]

#TODO: Add Windows checks??

Finally, when building and installing Boost using the "./b2" or "./bjam" executables that get 
constructed by running the bootstrap script, do specify that they are built as shared libraries
by setting the link=shared property. Example:

./b2 --prefix=<INSTALL_DIR> link=shared install

at prompt.


2. Installing the galsim Python package

From the GalSim base directory (in which this INSTALL file is found) type

scons galsim

at prompt.  If everything above was installed, you *might* be lucky enough to have this work
first time.  Otherwise, you may have to tell scons where to find some of those libraries.
This can be done by providing command line options as instructed by the scons error message,
for example

scons galsim TMV_DIR=<mylibdir>

at prompt, if the TMV library and include files were installed into <mylibdir>/lib and 
<mylibdir>/include.

#TODO: Add more here... perhaps link to Wiki FAQs?
#TODO: Windows?

To clean all compiled objects from the GalSim directory, you can use

scons -c

at prompt (this is rather like a make clean command).

If you want to install the galsim dynamic library libgalsim.dylib and others (#TODO: which?) 
in a system visible location (#TODO: is this correct terminology, even correct factually?) 
then this can be done using

scons install PREFIX=<INSTALL_DIR>

at prompt, where <INSTALL_DIR> is the directory you wish to install to (default if the PREFIX
property is unset is /usr/local).  These changes can be undone using

sudo scons uninstall

at prompt.


3. Installing example executables

There are some example executables that come with GalSim, and will be useful for testing and
development particularly outside the python layer.  

These can be built by typing

scons examples

at prompt.  The executables will then be visible in GalSim/bin/.  If you wish to install them 
to some other directory (e.g. one visible to $PATH) then this can be done by

sudo scons install examples PREFIX=<INSTALL_DIR>

at prompt, where <INSTALL_DIR> is the directory you wish to install to (default if unset is 
/usr/local).  These changes can be reversed using

sudo scons uninstall examples

at prompt.


4. Platform-specific notes 

i) Linux
#TODO: Add something here after testing!


ii) Mac OSX  (#TODO: Expand this, maybe move it to a Wiki FAQ)

a) Use of Fink -- the fink (http://www.finkproject.org) package management software is popular
with Mac users.  Once it is installed, many of the library dependencies of GalSim can be
added simply by commands such as

fink install cfitsio
fink install fftw 
fink install scons

TMV may soon be added to the list of fink packages, which would make GalSim installation even
easier.  However, there is a slight caveat regarding the use of fink-installed Boost C++ and
the Enthought Python Distribution, see below...

Macports is another popular Mac package management project.


b) The Enthought Python Distribution (EPD) is a single-install package that provides Python,
Numpy, and SCons, along with many other useful Python modules in a well-maintined single 
framework.  It is free for academic use (http://enthought.com/products/edudownload.php).

However, it is not automatically detected as the installed version of Python when fink installs
the Boost C++ library.  For GalSim to work, it needs to be.

The solution is then to install Boost C++ manually, which luckily is relatively straightforward.
This can be done by following the instructions of Section 1.v), above.

(#TODO: This maybe is not even truly a Mac-only issue, as EPD is also available for Linux and
Windows...)




